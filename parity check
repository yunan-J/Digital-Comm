# -*- coding = utf-8 -*-
# @Time : 2021/2/24 16:24
# @Author : Yunan
# @File : QAM.py
# @Software : PyCharm

import numpy as np
from PIL import Image
from matplotlib import pyplot as plt
import scipy
import komm

tx_im = Image.open('DC4_300x200.pgm')
Npixels = tx_im.size[1]*tx_im.size[0]
plt.figure()
plt.imshow(np.array(tx_im),cmap="gray",vmin=0,vmax=255)
tx_bin = np.unpackbits(np.array(tx_im))

# QAM
qam = komm.QAModulation(4, base_amplitudes=1)
print('qam.bits_per_symbol', qam.bits_per_symbol)
print('qam.labeling', qam.labeling)
awgn = komm.AWGNChannel(snr=10**(6./10.))
tx_data = qam.modulate(tx_bin)
rx_data = awgn(tx_data)
rx_bin = qam.demodulate(rx_data)

plt.figure()
plt.axes().set_aspect("equal")
plt.scatter(rx_data[:10000].real,rx_data[:10000].imag,s=1,marker=".")

rx_im = np.packbits(rx_bin).reshape(tx_im.size[1],tx_im.size[0])
plt.figure()
plt.imshow(np.array(rx_im),cmap="gray",vmin=0,vmax=255)

error = 0
for i in range(tx_bin.size):
    if tx_bin[i] != rx_bin[i]:
        error += 1

ber = error/tx_bin.size
print(ber)
error = np.zeros(0)
ber = np.zeros(0)
snr_db = np.linspace(0.1,1,10)
snr_db = 10*snr_db

for i in range(snr_db.size):
    awgn = komm.AWGNChannel(snr=10 ** (snr_db[i]/10.))
    tx_data = qam.modulate(tx_bin)
    rx_data = awgn(tx_data)
    rx_bin = qam.demodulate(rx_data)
    error = np.append(error, 0)

    for j in range(tx_bin.size):
        if tx_bin[j] != rx_bin[j]:
            error[i] += 1
    ber = np.append(ber, error[i]/(8*Npixels))

plt.figure()
# actual value
plt.scatter(snr_db ,ber+1e-20) #plot points
plt.plot(snr_db, ber+1e-20) #plot lines
# theoretical value
erfc = scipy.special.erfc(np.sqrt(snr_db/1))*0.5
plt.scatter(snr_db,erfc+ 1e-20)
plt.plot(snr_db, erfc+ 1e-20)

plt.legend(labels=['actual value', 'theoretical value'])
plt.title('Ratio comparison')
plt.xlabel('SNR (dB)')
plt.ylabel('BER')
plt.yscale("log")
plt.grid(True)

# ARQ
# add parity bit(No.8)
def parity_check(tx_bin_pc, snr):
    tx_bin_parity = tx_bin_pc
    for i in range(0, tx_bin_pc.size, 8):
        # odd
        if np.sum(tx_bin_parity[i: i + 7]) % 2 == 1:
            tx_bin_parity[i + 7] = 1
        # even
        else:
            tx_bin_parity[i + 7] = 0

    tx_data_parity = qam.modulate(tx_bin_parity)

    awgn = komm.AWGNChannel(snr=10 ** (snr / 10.))
    ARQ = 0
    rx_bin_parity = np.empty(0)
    # bit transmission
    for i in range(0, tx_data_parity.size, 8):
        rx_data_parity = awgn(tx_data_parity[i:i + 8])
        rx_bin_decode = qam.demodulate(rx_data_parity)
        # error & ARQ
        while np.sum(rx_bin_decode) % 2 == 1:
            ARQ = ARQ + 1
            rx_data_parity = awgn(tx_data_parity[i:i + 8])
            rx_bin_decode = qam.demodulate(rx_data_parity)

        rx_bin_parity = np.append(rx_bin_parity, rx_bin_decode)
    print(tx_data_parity.size)
    return ARQ, rx_bin_parity

ARQ, rx_bin_par = parity_check(tx_bin, 6)
print('ARQ:', ARQ)
print('BER:',ARQ/tx_bin.size)
rx_im_parity = np.packbits(rx_bin_par.astype(int)).reshape(tx_im.size[1],tx_im.size[0])
plt.figure()
plt.title('Image after parity check')
plt.imshow(np.array(rx_im_parity),cmap="gray",vmin=0,vmax=255)

# change snr
ber_par = np.zeros(0)
ARQ_par = np.zeros(0)
# snr: 1-10dB
for i in range(snr_db.size):
    ARQ, rx_bin_par = parity_check(tx_bin, i)
    ARQ_par = np.append(ARQ_par, ARQ)
    # ber_par = np.append(ber_par, ber_pc)
    error_parity = 0
    for i in range(rx_bin_par.size):
      if rx_bin_par[i] != tx_bin[i]:
        error_parity += 1
    ber_parity = error_parity / tx_bin.size
    print('ber parity:', ber_parity)
    ber_par = np.append(ber_par, ber_parity)

plt.figure()
# actual value (parity check)
plt.scatter(snr_db ,ber_par+1e-20) #plot points
plt.plot(snr_db, ber_par+1e-20) #plot lines
# actual value
plt.scatter(snr_db ,ber+1e-20) #plot points
plt.plot(snr_db, ber+1e-20) #plot lines
# theoretical value
plt.scatter(snr_db,erfc+ 1e-20)
plt.plot(snr_db, erfc+ 1e-20)
plt.legend(labels=['actual value (parity check)', 'actual value', 'theoretical value'])
plt.title('Ratio comparison (parity check)')
plt.xlabel('SNR (dB)')
plt.ylabel('BER')

plt.yscale("log")
plt.grid(True)




plt.show()
